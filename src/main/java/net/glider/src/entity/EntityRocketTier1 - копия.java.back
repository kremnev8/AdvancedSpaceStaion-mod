package net.glider.src.entity;

import net.glider.src.GliderCore;
import net.minecraft.entity.Entity;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.world.World;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import io.netty.buffer.ByteBuf;
import micdoodle8.mods.galacticraft.api.GalacticraftRegistry;
import micdoodle8.mods.galacticraft.api.entity.ICameraZoomEntity;
import micdoodle8.mods.galacticraft.api.entity.IEntityBreathable;
import micdoodle8.mods.galacticraft.api.entity.IIgnoreShift;
import micdoodle8.mods.galacticraft.api.entity.ITelemetry;
import micdoodle8.mods.galacticraft.api.prefab.entity.EntitySpaceshipBase;
import micdoodle8.mods.galacticraft.api.prefab.entity.EntitySpaceshipBase.EnumLaunchPhase;
import micdoodle8.mods.galacticraft.api.vector.BlockVec3Dim;
import micdoodle8.mods.galacticraft.api.vector.Vector3;
import micdoodle8.mods.galacticraft.api.world.IExitHeight;
import micdoodle8.mods.galacticraft.core.GalacticraftCore;
import micdoodle8.mods.galacticraft.core.client.gui.screen.GameScreenText;
import micdoodle8.mods.galacticraft.core.entities.player.GCPlayerStats;
import micdoodle8.mods.galacticraft.core.items.GCItems;
import micdoodle8.mods.galacticraft.core.network.IPacketReceiver;
import micdoodle8.mods.galacticraft.core.network.PacketDynamic;
import micdoodle8.mods.galacticraft.core.network.PacketSimple;
import micdoodle8.mods.galacticraft.core.network.PacketSimple.EnumSimplePacket;
import micdoodle8.mods.galacticraft.core.tile.TileEntityTelemetry;
import micdoodle8.mods.galacticraft.core.util.ConfigManagerCore;
import micdoodle8.mods.galacticraft.core.util.DamageSourceGC;
import micdoodle8.mods.galacticraft.core.util.GCCoreUtil;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.DamageSource;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.entity.EntityEvent;

import java.util.ArrayList;
import java.util.List;

import org.lwjgl.opengl.GL11;


public class EntityRocketTier1 extends Entity implements IIgnoreShift, ICameraZoomEntity,IEntityBreathable
{
    public static enum EnumLaunchPhase
    {
        UNIGNITED,
        IGNITED,
        LAUNCHED
    }

    protected long ticks = 0;
    public float shipDamage;
	public int launchPhase; 
    
    public EntityRocketTier1(World par1World)
    {
        super(par1World);
        this.launchPhase = EnumLaunchPhase.UNIGNITED.ordinal();
      //  this.preventEntitySpawning = true;
        this.ignoreFrustumCheck = true;
     //   this.renderDistanceWeight = 5.0D;
        this.setSize(1.1F, 3.0F);
        this.yOffset = 2.2F;
    }
    
    public EntityRocketTier1(World world, double posX, double posY, double posZ)
    {
        this(world);
        this.setSize(1.1F, 3.0F);
        this.yOffset = 2.2F;
        this.setPosition(posX, posY, posZ);
        this.motionX = 0.0D;
        this.motionY = 0.0D;
        this.motionZ = 0.0D;
        this.prevPosX = posX;
        this.prevPosY = posY;
        this.prevPosZ = posZ;
        
        this.isImmuneToFire=true;
        
    }
    
    @Override
    public boolean interactFirst(EntityPlayer player)
    {
        if (this.launchPhase == EnumLaunchPhase.LAUNCHED.ordinal())
        {
            return false;
        }

        if (this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayerMP)
        {
            if (!this.worldObj.isRemote)
            {
                GalacticraftCore.packetPipeline.sendTo(new PacketSimple(EnumSimplePacket.C_RESET_THIRD_PERSON, new Object[] { }), (EntityPlayerMP) player);
                GCPlayerStats stats = GCPlayerStats.get((EntityPlayerMP) player);
                stats.chatCooldown = 0;
                player.mountEntity(null);
                player.setPositionAndUpdate(player.posX, player.posY+5, player.posZ); 
            }

            return true;
        }
        else if (player instanceof EntityPlayerMP)
        {
            if (!this.worldObj.isRemote)
            {
                GalacticraftCore.packetPipeline.sendTo(new PacketSimple(EnumSimplePacket.C_DISPLAY_ROCKET_CONTROLS, new Object[] { }), (EntityPlayerMP) player);
                GCPlayerStats stats = GCPlayerStats.get((EntityPlayerMP) player);
                stats.chatCooldown = 0;
                player.mountEntity(this);
            }

            return true;
        }

        return false;
    }
    
    
    
    public void QuitRocket(EntityPlayer player)
    {
        if (this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayerMP)
        {
            if (!this.worldObj.isRemote)
            {
                GalacticraftCore.packetPipeline.sendTo(new PacketSimple(EnumSimplePacket.C_RESET_THIRD_PERSON, new Object[] { }), (EntityPlayerMP) player);
                GCPlayerStats stats = GCPlayerStats.get((EntityPlayerMP) player);
                stats.chatCooldown = 0;
                player.mountEntity(null);
                player.setPositionAndUpdate(player.posX, player.posY+5, player.posZ); 
            }
        }
    }
    
    public void EnterRocket(EntityPlayer player)
    {
    	if (player instanceof EntityPlayerMP)
        {
            if (!this.worldObj.isRemote)
            {
                GalacticraftCore.packetPipeline.sendTo(new PacketSimple(EnumSimplePacket.C_DISPLAY_ROCKET_CONTROLS, new Object[] { }), (EntityPlayerMP) player);
                GCPlayerStats stats = GCPlayerStats.get((EntityPlayerMP) player);
                stats.chatCooldown = 0;
                player.mountEntity(this);
            }
        }
    }
    
    @Override
    public void updateRiderPosition()
    {
        if (this.riddenByEntity != null)
        {
            this.riddenByEntity.setPosition(this.posX, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ);
        }
    }

    @Override
    protected boolean canTriggerWalking()
    {
        return false;
    }

    @Override
    protected void entityInit()
    {
    }

    @Override
    public AxisAlignedBB getCollisionBox(Entity par1Entity)
    {
        return null;
    }

    @Override
    public AxisAlignedBB getBoundingBox()
    {
        return null;
    }

    @Override
    public boolean canBePushed()
    {
        return false;
    }
    
    protected void spawnParticles(boolean launched)
    {
        if (!this.isDead)
        {
            double x1 = 2 * Math.cos(this.rotationYaw * Math.PI / 180.0D) * Math.sin(this.rotationPitch * Math.PI / 180.0D);
            double z1 = 2 * Math.sin(this.rotationYaw * Math.PI / 180.0D) * Math.sin(this.rotationPitch * Math.PI / 180.0D);
            double y1 = 2 * Math.cos((this.rotationPitch - 180) * Math.PI / 180.0D);

     /*       if (this.landing && this.targetVec != null)
     /       {
                double modifier = this.posY - this.targetVec.y;
                modifier = Math.max(modifier, 1.0);
                x1 *= modifier / 60.0D;
                y1 *= modifier / 60.0D;
                z1 *= modifier / 60.0D;
            }*/

            final double y = this.prevPosY + (this.posY - this.prevPosY) + y1;

            final double x2 = this.posX + x1;
            final double z2 = this.posZ + z1;

            EntityLivingBase riddenByEntity = this.riddenByEntity instanceof EntityLivingBase ? (EntityLivingBase)this.riddenByEntity : null;

            if (this.getLaunched())
            {
                Vector3 motionVec = new Vector3(x1, y1, z1);
                GliderCore.proxy.spawnParticle("launchFlameSmall", new Vector3(x2 + 0.1 - this.rand.nextDouble() / 10, y+0.5D, z2 + 0.1 - this.rand.nextDouble() / 10), motionVec, new Object[] { riddenByEntity });
                GliderCore.proxy.spawnParticle("launchFlameSmall", new Vector3(x2 - 0.1 + this.rand.nextDouble() / 10, y+0.5D, z2 + 0.1 - this.rand.nextDouble() / 10), motionVec, new Object[] { riddenByEntity });
                GliderCore.proxy.spawnParticle("launchFlameSmall", new Vector3(x2 - 0.1 + this.rand.nextDouble() / 10, y+0.5D, z2 - 0.1 + this.rand.nextDouble() / 10), motionVec, new Object[] { riddenByEntity });
                GliderCore.proxy.spawnParticle("launchFlameSmall", new Vector3(x2 + 0.1 - this.rand.nextDouble() / 10, y+0.5D, z2 - 0.1 + this.rand.nextDouble() / 10), motionVec, new Object[] { riddenByEntity });
          //      GliderCore.proxy.spawnParticle("launchFlameSmall", new Vector3(x2, y, z2), motionVec, new Object[] { riddenByEntity });
          //      GliderCore.proxy.spawnParticle("launchFlameSmall", new Vector3(x2 + 0.4, y, z2), motionVec, new Object[] { riddenByEntity });
          ////      GliderCore.proxy.spawnParticle("launchFlameSmall", new Vector3(x2 - 0.4, y, z2), motionVec, new Object[] { riddenByEntity });
           //     GliderCore.proxy.spawnParticle("launchFlameSmall", new Vector3(x2, y, z2 + 0.4D), motionVec, new Object[] { riddenByEntity });
           //     GliderCore.proxy.spawnParticle("launchFlameSmall", new Vector3(x2, y, z2 - 0.4D), motionVec, new Object[] { riddenByEntity });

            }
            else
            {
                GliderCore.proxy.spawnParticle("launchFlameIdle", new Vector3(x2 + 0.4 - this.rand.nextDouble() / 10, y, z2 + 0.4 - this.rand.nextDouble() / 10), new Vector3(x1 + 0.7, y1 - 1D, z1 + 0.7), new Object[] { riddenByEntity });
                GliderCore.proxy.spawnParticle("launchFlameIdle", new Vector3(x2 - 0.4 + this.rand.nextDouble() / 10, y, z2 + 0.4 - this.rand.nextDouble() / 10), new Vector3(x1 - 0.7, y1 - 1D, z1 + 0.7), new Object[] { riddenByEntity });
                GliderCore.proxy.spawnParticle("launchFlameIdle", new Vector3(x2 - 0.4 + this.rand.nextDouble() / 10, y, z2 - 0.4 + this.rand.nextDouble() / 10), new Vector3(x1 - 0.7, y1 - 1D, z1 - 0.7), new Object[] { riddenByEntity });
                GliderCore.proxy.spawnParticle("launchFlameIdle", new Vector3(x2 + 0.4 - this.rand.nextDouble() / 10, y, z2 - 0.4 + this.rand.nextDouble() / 10), new Vector3(x1 + 0.7, y1 - 1D, z1 - 0.7), new Object[] { riddenByEntity });
            }
        }
    }

    @Override
    public boolean attackEntityFrom(DamageSource par1DamageSource, float par2)
    {
        if (!this.isDead && !par1DamageSource.isFireDamage())
        {
			boolean flag = par1DamageSource.getEntity() instanceof EntityPlayer && ((EntityPlayer)par1DamageSource.getEntity()).capabilities.isCreativeMode;
        	Entity e = par1DamageSource.getEntity(); 
            if (this.isEntityInvulnerable() || this.posY > 300 || (e instanceof EntityLivingBase && !(e instanceof EntityPlayer)))
            {
                return false;
            }
            else
            {
                this.setBeenAttacked();
                this.shipDamage += par2 * 10;

                if (e instanceof EntityPlayer && ((EntityPlayer) e).capabilities.isCreativeMode)
                {
                    this.shipDamage = 100;
                }

                if (flag || this.shipDamage > 90 )
                {
                    if (this.riddenByEntity != null)
                    {
                        this.riddenByEntity.mountEntity(null);
                    }

					if (flag)
					{
						this.setDead();
					}
					else
					{
						this.setDead();
						this.dropShipAsItem();
					}
                    return true;
                }

                return true;
            }
        }
        else
        {
            return true;
        }
    }

    public void dropShipAsItem()
    {
        if (this.worldObj.isRemote)
        {
            return;
        }

        for (final ItemStack item : this.getItemsDropped(new ArrayList<ItemStack>()))
        {
            EntityItem entityItem = this.entityDropItem(item, 0);

            if (item.hasTagCompound())
            {
                entityItem.getEntityItem().setTagCompound((NBTTagCompound) item.getTagCompound().copy());
            }
        }
    }

    public List<ItemStack> getItemsDropped(List<ItemStack> droppedItemList)
    {
    	droppedItemList.add(new ItemStack(GCItems.rocketTier1));
    	return droppedItemList;
    }

    @Override
    public boolean canBeCollidedWith()
    {
        return !this.isDead;
    }

    @Override
    public boolean shouldRiderSit()
    {
        return false;
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    @Override
    public void onUpdate()
    {
    	
        if (this.ticks >= Long.MAX_VALUE)
        {
            this.ticks = 0;
        }


        this.ticks++;

        super.onUpdate();
        
        if (this.riddenByEntity != null)
        {
            this.riddenByEntity.fallDistance = 0.0F;
    //       if (!worldObj.isRemote)
      //      {
      //      	if (this.riddenByEntity instanceof EntityPlayer)
      //      {
      //      GCPlayerStats GCPlayer = GCPlayerStats.get((EntityPlayerMP) this.riddenByEntity);
       //     GCPlayer.oxygenSetupValid = true;
       //     }
       //     }
        }

      //  if (this.posY > (this.worldObj.provider instanceof IExitHeight ? ((IExitHeight) this.worldObj.provider).getYCoordinateToTeleport() : 1200))
     ////   {
     //       this.onReachAtmosphere();
     //       if (this.worldObj.isRemote)
     //       	this.posY = 1 + (this.worldObj.provider instanceof IExitHeight ? ((IExitHeight) this.worldObj.provider).getYCoordinateToTeleport() : 1200);
      //  }

        if ((this.getLaunched() || this.launchPhase == EnumLaunchPhase.IGNITED.ordinal()) && !ConfigManagerCore.disableSpaceshipParticles)
        {
            if (this.worldObj.isRemote)
            {
                this.spawnParticles(this.getLaunched());
            }
        }

        
        if (this.shipDamage > 0)
        {
            this.shipDamage--;
        }

        if (!this.worldObj.isRemote)
        {
	        if (this.posY < 0.0D)
	        {
	            this.kill();
	        }
	       // else
	  //     if (this.posY > (this.worldObj.provider instanceof IExitHeight ? ((IExitHeight) this.worldObj.provider).getYCoordinateToTeleport() : 1200) + 100)
	  //      {
	  //      	if (this.riddenByEntity instanceof EntityPlayerMP)
	  ////      	{
	   //     		GCPlayerStats stats = GCPlayerStats.get((EntityPlayerMP) this.riddenByEntity);
	   //     		if (stats.usingPlanetSelectionGui)
	   //     		{
	    //    			this.kill();
	   //    		}
	   //     	}
	   //     	else
	   //     		this.kill();
	   //     }
        }
        

        AxisAlignedBB box = null;

        box = this.boundingBox.expand(0.5D, 2.0D, 0.5D);

        final List<?> var15 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, box);

        if (var15 != null && !var15.isEmpty())
        {
            for (int var52 = 0; var52 < var15.size(); ++var52)
            {
                final Entity var17 = (Entity) var15.get(var52);

                if (var17 != this.riddenByEntity)
                {
                    var17.applyEntityCollision(this);
                }
            }
        }

        if (this.rotationPitch > 90)
        {
            this.rotationPitch = 90;
        }

        if (this.rotationPitch < -90)
        {
            this.rotationPitch = -90;
        }

        this.motionX = -(50 * Math.cos(this.rotationYaw * Math.PI / 180.0D) * Math.sin(this.rotationPitch * 0.01 * Math.PI / 180.0D));
        this.motionZ = -(50 * Math.sin(this.rotationYaw * Math.PI / 180.0D) * Math.sin(this.rotationPitch * 0.01 * Math.PI / 180.0D));


        if (this.worldObj.isRemote)
        {
            this.setPosition(this.posX, this.posY, this.posZ);

            if (this.shouldMoveClientSide())
            {
                this.moveEntity(this.motionX, this.motionY, this.motionZ);
            }
        }
        else
        {
            this.moveEntity(this.motionX, this.motionY, this.motionZ);
        }

        this.setRotation(this.rotationYaw, this.rotationPitch);

        if (this.worldObj.isRemote)
        {
            this.setPosition(this.posX, this.posY, this.posZ);
        }

        this.prevPosX = this.posX;
        this.prevPosY = this.posY;
        this.prevPosZ = this.posZ;
    }

    protected boolean shouldMoveClientSide()
    {
        return true;
    }

    public void turnYaw(float f)
    {
        this.rotationYaw += f;
    }

    public void turnPitch(float f)
    {
        this.rotationPitch += f;
    }


    @Override
    @SideOnly(Side.CLIENT)
    public void setPositionAndRotation2(double par1, double par3, double par5, float par7, float par8, int par9)
    {
        this.setRotation(par7, par8);
    }

    @Override
    protected void writeEntityToNBT(NBTTagCompound nbt)
    {
        nbt.setInteger("launchPhase", this.launchPhase + 1);
    }

    @Override
    protected void readEntityFromNBT(NBTTagCompound nbt)
    {
        this.setLaunchPhase(EnumLaunchPhase.values()[nbt.getInteger("launchPhase") - 1]);
    }

    public boolean getLaunched()
    {
        return this.launchPhase == EnumLaunchPhase.LAUNCHED.ordinal();
    }


    public void ignite()
    {
        this.setLaunchPhase(EnumLaunchPhase.IGNITED);
    }

    @Override
    public double getMountedYOffset()
    {
        return -0.9D;
    }

    public void onReachAtmosphere()
    {
    }

    @SideOnly(Side.CLIENT)
    public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12)
    {
    }

    @Override
    public boolean canRiderInteract()
    {
        return true;
    }

    public void setLaunchPhase(EnumLaunchPhase phase)
    {
        this.launchPhase = phase.ordinal();
    }

    @Override
    public boolean shouldIgnoreShiftExit()
    {
        return this.launchPhase == EnumLaunchPhase.LAUNCHED.ordinal();
    }

    public void adjustDisplay(int[] data)
    {
		GL11.glRotatef(data[4], -1, 0, 0);
		GL11.glTranslatef(0, this.height / 4, 0);
    }

	@Override
	public float getCameraZoom()
	{
		return 15.0F;
	}

	@Override
	public boolean defaultThirdPerson()
	{
		return true;
	}

	@Override
	public boolean canBreath()
	{
		return true;
	}

}